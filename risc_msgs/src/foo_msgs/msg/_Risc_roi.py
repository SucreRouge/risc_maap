"""autogenerated by genpy from foo_msgs/Risc_roi.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Risc_roi(genpy.Message):
  _md5sum = "09e4af56af7b1197f305e2925faf4927"
  _type = "foo_msgs/Risc_roi"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name

bool visible

int32 x

int32 y

float32 width

float32 height

float64 angle

"""
  __slots__ = ['name','visible','x','y','width','height','angle']
  _slot_types = ['string','bool','int32','int32','float32','float32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,visible,x,y,width,height,angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Risc_roi, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.visible is None:
        self.visible = False
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.angle is None:
        self.angle = 0.
    else:
      self.name = ''
      self.visible = False
      self.x = 0
      self.y = 0
      self.width = 0.
      self.height = 0.
      self.angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2i2fd.pack(_x.visible, _x.x, _x.y, _x.width, _x.height, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.visible, _x.x, _x.y, _x.width, _x.height, _x.angle,) = _struct_B2i2fd.unpack(str[start:end])
      self.visible = bool(self.visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2i2fd.pack(_x.visible, _x.x, _x.y, _x.width, _x.height, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.visible, _x.x, _x.y, _x.width, _x.height, _x.angle,) = _struct_B2i2fd.unpack(str[start:end])
      self.visible = bool(self.visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2i2fd = struct.Struct("<B2i2fd")
