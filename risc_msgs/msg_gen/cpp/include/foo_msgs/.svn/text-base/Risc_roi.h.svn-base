/* Auto-generated by genmsg_cpp for file /home/ece/ros_ws/src/foo_msgs/msg/Risc_roi.msg */
#ifndef FOO_MSGS_MESSAGE_RISC_ROI_H
#define FOO_MSGS_MESSAGE_RISC_ROI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace foo_msgs
{
template <class ContainerAllocator>
struct Risc_roi_ {
  typedef Risc_roi_<ContainerAllocator> Type;

  Risc_roi_()
  : name()
  , visible(false)
  , x(0)
  , y(0)
  , width(0.0)
  , height(0.0)
  , angle(0.0)
  {
  }

  Risc_roi_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , visible(false)
  , x(0)
  , y(0)
  , width(0.0)
  , height(0.0)
  , angle(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint8_t _visible_type;
  uint8_t visible;

  typedef int32_t _x_type;
  int32_t x;

  typedef int32_t _y_type;
  int32_t y;

  typedef float _width_type;
  float width;

  typedef float _height_type;
  float height;

  typedef double _angle_type;
  double angle;


  typedef boost::shared_ptr< ::foo_msgs::Risc_roi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foo_msgs::Risc_roi_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Risc_roi
typedef  ::foo_msgs::Risc_roi_<std::allocator<void> > Risc_roi;

typedef boost::shared_ptr< ::foo_msgs::Risc_roi> Risc_roiPtr;
typedef boost::shared_ptr< ::foo_msgs::Risc_roi const> Risc_roiConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::foo_msgs::Risc_roi_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::foo_msgs::Risc_roi_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace foo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::foo_msgs::Risc_roi_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::foo_msgs::Risc_roi_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::foo_msgs::Risc_roi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09e4af56af7b1197f305e2925faf4927";
  }

  static const char* value(const  ::foo_msgs::Risc_roi_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x09e4af56af7b1197ULL;
  static const uint64_t static_value2 = 0xf305e2925faf4927ULL;
};

template<class ContainerAllocator>
struct DataType< ::foo_msgs::Risc_roi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "foo_msgs/Risc_roi";
  }

  static const char* value(const  ::foo_msgs::Risc_roi_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::foo_msgs::Risc_roi_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
\n\
bool visible\n\
\n\
int32 x\n\
\n\
int32 y\n\
\n\
float32 width\n\
\n\
float32 height\n\
\n\
float64 angle\n\
\n\
";
  }

  static const char* value(const  ::foo_msgs::Risc_roi_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::foo_msgs::Risc_roi_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.visible);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Risc_roi_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foo_msgs::Risc_roi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::foo_msgs::Risc_roi_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOO_MSGS_MESSAGE_RISC_ROI_H

