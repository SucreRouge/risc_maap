/* Auto-generated by genmsg_cpp for file /home/ece/ros_ws/src/foo_msgs/msg/Angle.msg */
#ifndef FOO_MSGS_MESSAGE_ANGLE_H
#define FOO_MSGS_MESSAGE_ANGLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace foo_msgs
{
template <class ContainerAllocator>
struct Angle_ {
  typedef Angle_<ContainerAllocator> Type;

  Angle_()
  : name()
  , visible(false)
  , azim(0.0)
  , elev(0.0)
  {
  }

  Angle_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , visible(false)
  , azim(0.0)
  , elev(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint8_t _visible_type;
  uint8_t visible;

  typedef double _azim_type;
  double azim;

  typedef double _elev_type;
  double elev;


  typedef boost::shared_ptr< ::foo_msgs::Angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foo_msgs::Angle_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Angle
typedef  ::foo_msgs::Angle_<std::allocator<void> > Angle;

typedef boost::shared_ptr< ::foo_msgs::Angle> AnglePtr;
typedef boost::shared_ptr< ::foo_msgs::Angle const> AngleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::foo_msgs::Angle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::foo_msgs::Angle_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace foo_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::foo_msgs::Angle_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::foo_msgs::Angle_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::foo_msgs::Angle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "be95d8b52b2e16e0138b2b3779cd930f";
  }

  static const char* value(const  ::foo_msgs::Angle_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbe95d8b52b2e16e0ULL;
  static const uint64_t static_value2 = 0x138b2b3779cd930fULL;
};

template<class ContainerAllocator>
struct DataType< ::foo_msgs::Angle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "foo_msgs/Angle";
  }

  static const char* value(const  ::foo_msgs::Angle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::foo_msgs::Angle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
bool visible\n\
float64 azim\n\
float64 elev\n\
\n\
";
  }

  static const char* value(const  ::foo_msgs::Angle_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::foo_msgs::Angle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.visible);
    stream.next(m.azim);
    stream.next(m.elev);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Angle_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foo_msgs::Angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::foo_msgs::Angle_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "azim: ";
    Printer<double>::stream(s, indent + "  ", v.azim);
    s << indent << "elev: ";
    Printer<double>::stream(s, indent + "  ", v.elev);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FOO_MSGS_MESSAGE_ANGLE_H

