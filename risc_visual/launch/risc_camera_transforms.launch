<launch>
        <!-- Get Cortex marker data Streaming --> 
      <node pkg="cortex_ros" type="stream_markers" name="stream_markers" output="screen">
</node> 

<!-- Get Cortex State estimation given Templates -->
<node pkg="risc_estimation" type="states_estimation.py" name="states_estimation" output="screen"> 
</node> 
                
    <!-- Launch the AR.Drone driver -->
    <node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true">
    <!-- Set up rosparams for saturation values and agressiveness -->
    <param name="outdoor" value="0" />              <!-- If we are flying outdoors, will select more aggressive default settings -->
    <param name="flight_without_shell" value="0" /> <!-- Changes internal controller gains if we are flying without the propeller guard -->
      <param name="altitude_max" value="3000" />      <!-- in millimeters = 3 meters = 9' -->
      <param name="altitude_min" value="50" />        <!-- in millimeters = 5cm = 2" -->
      <param name="euler_angle_max" value="0.349066" />   <!-- maximum allowable body angle in radians = 5 degrees -->
      <param name="control_vz_max" value="1000" />        <!-- maximum z velocity in mm/sec = 0.2m/sec -->
      <param name="control_yaw" value=".349066" />        <!-- maximum rotation rate in radians/sec = 40 degrees per second (1/9 rev/sec) -->

       <param name="detect_type" value="10" />
       <param name="detections_select_h" value="32" /> <!-- In the horizontal camera, look for the orange-blue-orange markers -->
       <param name="detections_select_v_hsync" value="128" />  <!-- In the vertical camera, detect the A4 marker -->
       <param name="enemy_colors" value="3" />         <!-- Orange-Blue-Orange = 3 -->
       <param name="enemy_without_shell" value="0" />  <!-- Detect the indoor stickers, rather than the outdoor hull -->
    </node>


    <!-- Create Transforms --> 

    <node name="transform_tuner" pkg="risc_control" type="transform_tuner" output="screen" required="true">
    </node >

    <group ns="ardrone">
    <node name="image_proc" pkg="image_proc" type="image_proc"/>
    </group >

    <node name="rois" pkg="risc_visual" type="landmarks"  output="screen" required="true">
    </node >

    <node name="angles" pkg="risc_estimation" type="angle_estimation_tuner2015.py"  output="screen" required="true">
    </node >

    <!-- Draw the RISC Multi Agent Analysis Platform -->
       <node name="draw_risc_maap" pkg="risc_visual" type="draw_risc_maap"  output="screen"     required="true">
          </node >

    <!-- Draw Cortex Objects -->
    <node name="draw_cortex" pkg="risc_visual" type="draw_cortex"  output="screen"           required="true">
    </node>

    <node name="draw_angles" pkg="risc_visual" type="draw_angles"  output="screen"  required="true">
    </node >

    <!-- Start RVIZ using Diff_flat config file -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find risc_visual)/config/Trans_tuner.rviz" output="screen"       required="true">
    </node> 



</launch>
