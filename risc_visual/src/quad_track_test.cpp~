
/*======================================================
	Created by:  	D. Spencer Maughan
	Last updated: 	July 2014
	File name: 		Quad_tracker.cpp
	Organization:	RISC Lab, Utah State University
 ======================================================*/

#include <ros/ros.h>
#include "foo_msgs/Risc_rois.h"
#include "foo_msgs/Risc_roi.h"
#include "ardrone_autonomy/Navdata.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <cv.h>
#include <vector>
#include <string>
#include <algorithm>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/features2d/features2d.hpp>
#define PI 3.14159265

using namespace std;
namespace enc = sensor_msgs::image_encodings;

    /*=================
     *    Globals
     ================*/

int kernal = 5;
int green_radius = 10;
int red_radius = 10;
int yellow_radius = 10;
int pink_radius = 10;
int size_limit = 117;
ros::Publisher pub; 
foo_msgs::Risc_rois roi;
static const char WINDOW1[] = "Quads";
static const char WINDOW2[] = "green red border";
static const char WINDOW3[] = "red pink border";
static const char WINDOW4[] = "pink yellow border";
static const char WINDOW5[] = "yellow green border";

    /*======================================
     *     Replace Max_Element Function
     =====================================*/

float Max(float Val[3])
{
    float V;
    if ((Val[0] > Val[1]) && (Val[0] > Val[2])){ V = Val[0];} 
    if ((Val[0] > Val[1]) && (Val[0] == Val[2])){ V = Val[0];} 
    if ((Val[0] == Val[1]) && (Val[0] > Val[2])){ V = Val[0];} 
    if ((Val[1] > Val[0]) && (Val[1] > Val[2])){ V = Val[1];} 
    if ((Val[1] > Val[0]) && (Val[1] == Val[2])){ V = Val[1];} 
    if ((Val[1] == Val[0]) && (Val[1] > Val[2])){ V = Val[1];} 
    if ((Val[2] > Val[0]) && (Val[2] > Val[1])){ V = Val[2];} 
    if ((Val[2] > Val[0]) && (Val[2] == Val[1])){ V = Val[2];} 
    if ((Val[2] == Val[0]) && (Val[2] > Val[1])){ V = Val[2];} 
    return V;
}

    /*======================================
     *     Replace Min_Element Function
     =====================================*/
     
float Min(float Val[3])
{
    float V;
    if ((Val[0] < Val[1]) && (Val[0] < Val[2])){ V = Val[0];} 
    if ((Val[0] < Val[1]) && (Val[0] == Val[2])){ V = Val[0];} 
    if ((Val[0] == Val[1]) && (Val[0] < Val[2])){ V = Val[0];} 
    if ((Val[1] < Val[0]) && (Val[1] < Val[2])){ V = Val[1];} 
    if ((Val[1] < Val[0]) && (Val[1] == Val[2])){ V = Val[1];} 
    if ((Val[1] == Val[0]) && (Val[1] < Val[2])){ V = Val[1];} 
    if ((Val[2] < Val[0]) && (Val[2] < Val[1])){ V = Val[2];} 
    if ((Val[2] < Val[0]) && (Val[2] == Val[1])){ V = Val[2];} 
    if ((Val[2] == Val[0]) && (Val[2] < Val[1])){ V = Val[2];} 
    return V;
}

    /*======================================
     *   Replace Opencv cvtColor Function
     =====================================*/
     
cv::Mat BGR2HSV(cv::Mat BGR)
{
    cv::Mat HSV(cv::Size(BGR.cols,BGR.rows),CV_8UC3);

    for(int i=0; i<BGR.rows; i++)
    {
            for(int j=0; j<BGR.cols; j++) 
            {
                float Val[3];
                float H,S,V;

                Val[0]= (BGR.at<cv::Vec3b>(i,j)[0]);
                Val[1]= (BGR.at<cv::Vec3b>(i,j)[1]);
                Val[2]= (BGR.at<cv::Vec3b>(i,j)[2]);

                Val[0]= Val[0]/255;
                Val[1]= Val[1]/255;
                Val[2]= Val[2]/255;


                // Value

                V = Max(Val);
                float delta = V - Min(Val);
          
                // Saturation
                if (V != 0)
                {
                S = delta/V;
                
                //Hue
                if (V == Val[0])
                {
                    H = 240 + (60*(Val[2]-Val[1]))/delta;
                }
                
                if (V == Val[1])
                {
                    H = 120 + (60*(Val[0]-Val[2]))/delta;
                }
                
                if (V == Val[2])
                { 
                    H = (60*(Val[1]-Val[0]))/delta;
                }
                
                if (H<0){H = H + 360;}}
                
                if (V == 0){V = 0;} 
                
                if (V > 1){V = 1;}

                HSV.at<cv::Vec3b>(i,j)[0] = H/2;
                HSV.at<cv::Vec3b>(i,j)[1] = 255*S;
                HSV.at<cv::Vec3b>(i,j)[2] = V*255;
            }
    }
    return HSV;
}

/*=====================================
 *     Allow combination of Masks
 *=====================================*/

cv::Mat combineMasks(cv::Mat mask1, cv::Mat mask2)
{
    cv::Mat new_Mask(cv::Size(mask1.cols,mask1.rows),CV_8U);
    for (int i=0; i<mask1.rows; i++)
    {
        for(int j=0; j<mask1.cols; j++)
        {
            new_Mask.at<uchar>(i,j) = mask1.at<uchar>(i,j)|mask2.at<uchar>(i,j);
        }
    }
    return new_Mask;
}


    /*===========================
     *   Create Color Mask
     ============================*/

cv::Mat createColorMask(cv::Mat hsvframe, int color[8], int w, int h)
{

	cv::Mat color_thresh(cv::Size(w,h),CV_8U);
	cv::Mat color_element = cv::getStructuringElement( cv::MORPH_ELLIPSE, cv::Size(2*color[6] +1, 2*color[6] + 1), cv::Point(color[6], color[6]));

if (color[0]>color[1])
{
	cv::inRange(hsvframe,cv::Scalar(color[1],color[3],color[5]),cv::Scalar(color[0],color[2],color[4]),color_thresh);
	cv::dilate(color_thresh,color_thresh,color_element);
	cv::erode(color_thresh,color_thresh,color_element);
	cv::GaussianBlur(color_thresh,color_thresh,cv::Size(2*color[7]+1,2*color[7]+1),2,2);
}

if (color[0]<color[1])
{
	cv::Mat color_thresh2(cv::Size(w,h),CV_8U);
	cv::inRange(hsvframe,cv::Scalar(color[1],color[3],color[5]),cv::Scalar(180,color[2],color[4]),color_thresh);
	cv::inRange(hsvframe,cv::Scalar(0,color[3],color[5]),cv::Scalar(color[0],color[2],color[4]),color_thresh2);
    color_thresh = combineMasks(color_thresh,color_thresh2);
	cv::dilate(color_thresh,color_thresh,color_element);
	cv::erode(color_thresh,color_thresh,color_element);
	cv::GaussianBlur(color_thresh,color_thresh,cv::Size(2*color[7]+1,2*color[7]+1),2,2);
}

return color_thresh;
}

        /*========================
         *     Find boundaries
         ========================*/
	
cv::Mat boundary(int C1[8],int C2[8],cv::Mat HSV,int kernal,float radius1,float radius2)
{
cv::Mat m(cv::Size(HSV.cols,HSV.rows),CV_8UC1);
m.setTo(cv::Scalar(0,0,0));
float H1_c,H2_c;
if (C1[0]<C1[1]){H1_c = (C1[0]+180+C1[1])/2;}
if (C1[0]>C1[1]){H1_c = (C1[0]+C1[1])/2;}
if (C2[0]<C2[1]){H2_c = (C2[0]+180+C2[1])/2;}
if (C2[0]>C2[1]){H2_c = (C2[0]+C2[1])/2;}

for (int u=kernal; u<HSV.rows; u++)
{
	for (int v=kernal; v<HSV.cols; v++)
        {
               int C1_m = 0;
               int C2_m = 0;
               for (int i = 0; i<kernal; i++)
               {
                     for (int j = 0; j<kernal; j++)
                     {
	        	int H = (HSV.at<cv::Vec3b>(u-i,v-j)[0]);
	        	int S = (HSV.at<cv::Vec3b>(u-i,v-j)[1]);
	        	int V = (HSV.at<cv::Vec3b>(u-i,v-j)[2]);

                        if (C1[0]<C1[1] && H<90){H=H+180;}
			if (S<C1[2] && S>C1[3] && V<C1[4] && V>C1[5])
	        	{ 
                        if (abs(H-H1_c)<radius1){C1_m = C1_m+abs(abs(H-H1_c)/radius1-1);}
                        }
                        if(H>180){H=H-180;}

                        if (C2[0]<C2[1] && H<90){H=H+180;}
			if (S<C2[2] && S>C2[3] && V<C2[4] && V>C2[5])
	        	{ 
                        if (abs(H-H2_c)<radius2){C2_m = C2_m+abs(abs(H-H2_c)/radius2-1);}
                        }
                        if(H>180){H=H-180;}
                        

                     }
               }

	       m.at<uchar>(u,v) = floor(C2_m*C1_m*255/(kernal*kernal));
        }
}   


return m;
}

    /*=========================================
     *  Function Called for Every New Image
     ========================================*/

void imageCallback(const sensor_msgs::ImageConstPtr& original_image)
{
    /*===================
     *    CV Bridge
     ==================*/

    cv_bridge::CvImagePtr cv_ptr;
    try
    {
        cv_ptr = cv_bridge::toCvCopy(original_image, enc::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
        ROS_ERROR("ros_opencv::edge.cpp::cv_bridge exception: %s", e.what());
        return;
    }
    

    /*=============================
     *   Set up image variables
     ============================*/
	cv::Mat hsvframe = BGR2HSV(cv_ptr->image);
    
    /*=========================================
     *    Color Tuning Values for Paints
     ========================================*/
        int bgr_green[3] = {60,29,25};
        int bgr_pink[3] = {175,41,93};
        int bgr_red[3] = {2,86,58};
        int bgr_yellow[3] = {73,207,234};

        int hsv_green[3] = {60,29,25};//s and v are from 0 to 100
        int hsv_pink[3] = {175,41,93};
        int hsv_red[3] = {2,86,58};
        int hsv_yellow[3] = {50,69,92};
	int green[] = {95,35,230,80,255,5,2,1};
	int blue[] = {140,100,255,15,180,5,1,2};
	int red[] = {2,177,255,130,255,100,2,1};
	int yellow[] = {30,20,255,110,255,90,2,1};
	int pink[] = {175,160,184,61,255,160,1,1};
	int orange[] = {19,2,255,130,255,185,1,1};
        cv::createTrackbar("Kernal",WINDOW2, &kernal, 100);
        cv::createTrackbar("Green Radius",WINDOW2, &green_radius, 100);
        cv::createTrackbar("Yellow Radius",WINDOW4, &yellow_radius, 100);
        cv::createTrackbar("Pink Radius",WINDOW4, &pink_radius, 100);
        cv::createTrackbar("Red Radius",WINDOW2, &red_radius, 100);
        cv::Mat green_red = boundary(green,red,hsvframe,kernal,green_radius,red_radius);
        cv::imshow(WINDOW2,green_red); 
        cv::Mat pink_red = boundary(pink,red,hsvframe,kernal,pink_radius,red_radius);
        cv::imshow(WINDOW3,pink_red); 
        cv::Mat pink_yellow = boundary(pink,yellow,hsvframe,kernal,pink_radius,yellow_radius);
        cv::imshow(WINDOW4,pink_yellow); 
        cv::Mat green_yellow = boundary(green,yellow,hsvframe,kernal,green_radius,yellow_radius);
        cv::imshow(WINDOW5,green_yellow); 
	cv::imshow(WINDOW1,cv_ptr->image); 
	cv::waitKey(3);                                                   
  }                                                                                            
int main(int argc, char **argv)                                                             
                                                                                            
{
        ros::init(argc, argv, "quad_finder");
        ros::NodeHandle nh;
        //pub = nh.advertise<foo_msgs::Risc_rois>("ROIs", 1000);

        image_transport::ImageTransport it(nh);
                                                                                            
        cv::namedWindow(WINDOW1, CV_WINDOW_AUTOSIZE);
        cv::namedWindow(WINDOW2, CV_WINDOW_AUTOSIZE);
        cv::namedWindow(WINDOW3, CV_WINDOW_AUTOSIZE);
        cv::namedWindow(WINDOW4, CV_WINDOW_AUTOSIZE);
        cv::namedWindow(WINDOW5, CV_WINDOW_AUTOSIZE);
                                                                                            
        //image_transport::Subscriber sub = it.subscribe("ardrone/image_rect_color", 1, imageCallback);
        image_transport::Subscriber sub = it.subscribe("ardrone/image_raw", 1, imageCallback);
        cv::destroyAllWindows();                          
        ros::spin();
    
        ROS_INFO("ros_opencv::main.cpp::No error.");
  
 }
